# -*- coding: utf-8 -*-
"""
Задание 5.2a

Всё, как в задании 5.2, но, если пользователь ввел адрес хоста, а не адрес сети,
надо преобразовать адрес хоста в адрес сети и вывести адрес сети и маску,
как в задании 5.2.

Пример адреса сети (все биты хостовой части равны нулю):
* 10.0.1.0/24
* 190.1.0.0/16

Пример адреса хоста:
* 10.0.1.1/24 - хост из сети 10.0.1.0/24
* 10.0.5.195/28 - хост из сети 10.0.5.192/28

Если пользователь ввел адрес 10.0.1.1/24, вывод должен быть таким:

Network:
10        0         1         0
00001010  00000000  00000001  00000000

Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000


Проверить работу скрипта на разных комбинациях хост/маска, например:
    10.0.5.195/28, 10.0.1.1/24

Вывод сети и маски должен быть упорядочен также, как в примере:
- столбцами
- ширина столбца 10 символов (в двоичном формате
  надо добавить два пробела между столбцами
  для разделения октетов между собой)


Подсказка:
Есть адрес хоста в двоичном формате и маска сети 28. Адрес сети это первые 28 бит
адреса хоста + 4 ноля.
То есть, например, адрес хоста 10.1.1.195/28 в двоичном формате будет
bin_ip = "00001010000000010000000111000011"

А адрес сети будет первых 28 символов из bin_ip + 0000 (4 потому что всего
в адресе может быть 32 бита, а 32 - 28 = 4)
00001010000000010000000111000000

Ограничение: Все задания надо выполнять используя только пройденные темы.

"""
ip_template = '''Network:
{:<10}{:<10}{:<10}{:<10}
{:08b}  {:08b}  {:08b}  {:08b}'''
mask_template = '''Mask:
/{}
{:<10}{:<10}{:<10}{:<10}
{:08b}  {:08b}  {:08b}  {:08b}'''

ip_and_mask = input("Input ip with mask ")

ip, mask = ip_and_mask.split('/')
mask = int(mask)
ip=ip.split('.')

mask_bin = mask*'1'+(32-mask)*'0'
mask_bin = [mask_bin[i:i+8] for i in range(0,len(mask_bin),8)]
mask_int = [int(i,2) for i in mask_bin]

ip = [int(x) for x in ip]
bin_ip = '{:08b}{:08b}{:08b}{:08b}'.format(ip[0], ip[1], ip[2], ip[3]) 

# another_new_ip = bin_ip[:mask] + (32-mask)*'0' ##good method
# print(another_new_ip)

bin_ip = list(bin_ip)
for i in range(mask,len(bin_ip)): #mask manipulations
      bin_ip[i] = '0'
bin_ip = ''.join(bin_ip)
bin_ip = [bin_ip[i:i+8] for i in range(0,len(bin_ip),8)]
new_ip = [int(i,2) for i in bin_ip]

print(ip_template.format(new_ip[0],new_ip[1],new_ip[2],new_ip[3],new_ip[0],new_ip[1],new_ip[2],new_ip[3]))
print(mask_template.format(mask,mask_int[0],mask_int[1],mask_int[2],mask_int[3],mask_int[0],mask_int[1],mask_int[2],mask_int[3]))